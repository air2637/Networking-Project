
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SocketChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author wei
 */
public class myFrame extends javax.swing.JFrame {

    /**
     * Creates new form myFrame
     */
    public myFrame() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRadioButton1.setText("Original UDP");

        jRadioButton2.setText("Original TCP");

        jRadioButton3.setText("Modified UDP");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jRadioButton4.setText("Modified App (original UDP)");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jRadioButton5.setText("Receiver");

        jRadioButton6.setText("Sender");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Action");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Open File");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRadioButton5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton2))
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jRadioButton6)
                                    .addComponent(jRadioButton3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton6))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    class MyLoadChooser extends JFileChooser{
        MyLoadChooser(String path){
                super(path);
        }
        public void approveSelection() {
                File file = new File(getSelectedFile().getPath());
                if (file.exists()){
                        super.approveSelection();
                }
                else{
                        JOptionPane.showMessageDialog(null, "File not exsits");
                }
        }
    }
    /**
     * @param args the command line arguments
     */
    
    int protocol = 0;
    int action = 0;
    String path = "";
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(myFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                myFrame mf = new myFrame();
                mf.setVisible(true);
                mf.doNext();
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void doNext() {
        
        //disable "Open File" button
        jButton2.setEnabled(false);
        
        // for the selection of 4 different protocols
        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
        buttonGroup1.add(jRadioButton3);
        buttonGroup1.add(jRadioButton4);
        
        // for sender or receiver selection
        buttonGroup2.add(jRadioButton5);
        buttonGroup2.add(jRadioButton6);
        
        // assign corresponding value to protocol variable 
        jRadioButton1.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                protocol = 1;
                System.out.println("protocol selected is :" + protocol);
            }
            
        });
        
        jRadioButton2.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                protocol = 2;
                System.out.println("protocol selected is :" + protocol);
            }
            
        });
        
        jRadioButton3.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                protocol = 3;
                System.out.println("protocol selected is :" + protocol);
            }
            
        });
        
        jRadioButton4.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                protocol = 4;
                System.out.println("protocol selected is :" + protocol);
            }
            
        });
        
        // toggle the sender and receiver button
        jRadioButton5.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                action = 1;
                jButton1.setText("Receive");
                jButton2.setEnabled(false);
                System.out.println("action selected is :" + action);
            }
            
        });
        
        jRadioButton6.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                action = 2;
                jButton1.setText("Send");
                jButton2.setEnabled(true);
                System.out.println("action selected is :" + action);
            }
            
        });
        
        // Implement "Open File" function
        jButton2.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if(protocol>0){
                    JFileChooser file = new MyLoadChooser("savings");


                    file.setAcceptAllFileFilterUsed(false);
                    int result = file.showOpenDialog(null);
                    if(result == JFileChooser.APPROVE_OPTION){
                            path = file.getSelectedFile().getAbsolutePath();
                    }
                    if(!path.equals("")){
                        jTextArea1.append(path+" is ready to be sent.\n");
                    }
                }
            }
        
        });
        
        // Execution of action - receive or send
        jButton1.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if(protocol == 0){
                    jTextArea1.append("please ensure you have selected one protocol.\n");
                }else if(action == 0){
                    jTextArea1.append("please ensure you have selected one action.\n");
                }else if(action == 2 && path.equals("")){
                    jTextArea1.append("please ensure you have selected a file to be tranferred.\n");
                }else{
            
                    // receiving action
                    if(action == 1){
                        jTextArea1.setText("");
                        switch (protocol){
                            case 1: // orginal udp
                                jTextArea1.append("Ready to receive via UDP transfer.\n");
                                
                                new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        int port = 10342;
                                        String fileName = "./myImg_Action1.jpg";
                                        try{
                                            OriginUDPServer.receiveAndCreate(port, fileName);
                                            jTextArea1.append("Receiving process done.\n");
                                        }catch(Exception ex){
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                    }
                                }).start();
                                
                                break;
                            case 2: // orginal tcp
                                jTextArea1.append("Ready to receive via TCP transfer.\n");
                                
                                 new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        int port = 10342;
                                        //String fileName = "./myImg_Action2.jpg";
                                        try{
                                            TCPServer server = new TCPServer();
                                            SocketChannel socketChannel = server.createServerSocketChannel();
                                            server.readFileFromSocket(socketChannel);
                                            jTextArea1.append("Receiving process done.\n");
                                        }catch(Exception ex){
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                    }
                                }).start();
                                
                                break;
                            case 3: // modified udp
                                jTextArea1.append("Ready to receive via Modified UDP transfer.\n");
                                
                                {
                                    try {
                                        Thread.sleep(3500);
                                        jTextArea1.append("Receiving process done.\n");
                                    } catch (InterruptedException ex) {
                                        System.out.println(ex.getMessage());
                                    }
                                }
                                
                                new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        int port = 10341;
                                        String fileName = "./myImg_Action3.jpg"; // can include file full path
                                        System.out.println("Ready to receive the file!");
                                        
                                        try {
                                            RUDPServer.receiveAndCreate(port, fileName);
                                            jTextArea1.append("Receiving process done.\n");
                                        } catch (IOException ex) {
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                        
                                    }
                                }).start();
                                break;
                            case 4: // modified app + original udp
                                jTextArea1.append("Ready to receive via Modified App (original UDP) transfer.\n");
                                
                                new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        
                                        final int port = 10344;
                                        final String fileName = "./myImg_Action4.jpg";
                                        
                                        try{
                                            ModifiedAppServer.receiveAndCreate(port, fileName);
                                            jTextArea1.append("Receiving process done.\n");
                                        }catch(Exception ex){
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                        
                                    }
                                }).start();
                                
                                break;
                            default:
                                break;
                        }
                    }

                    // sending action
                    else if (action == 2){
                        jTextArea1.setText("");
                        switch (protocol){
                             case 1: // orginal udp
                                jTextArea1.append("Sending"+ path + " via UDP transfer.\n");
                                
                                new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        String hostName = "127.0.0.1";
                                        int port = 10342;
                                        long initialTime = System.currentTimeMillis();
                                        try{
                                            OriginUDPClient.createAndSend(hostName, port, path);
                                            jTextArea1.append("Sent.\n");
                                        }catch(Exception ex){
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                        long totalTime = System.currentTimeMillis() - initialTime;
                                         jTextArea1.append("Total time spent: "+totalTime+ " ms. \n");
                                    }
                                }).start();
                               
                                break;
                            case 2: // orginal tcp
                                jTextArea1.append("Sending"+ path + "  via TCP transfer.\n");
                                
                                new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        long initialTime = System.currentTimeMillis();
                                        try{
                                            TCPClient nioClient = new TCPClient();
                                            //starttime = System.nanoTime();
                                            SocketChannel socketChannel = nioClient.createChannel();
                                            nioClient.sendFile(socketChannel, path);
                                            jTextArea1.append("Sent.\n");
                                            long totalTime = System.currentTimeMillis()- initialTime;
                                            jTextArea1.append("Total time spent: "+totalTime+ " ms. \n");
                                        }catch(Exception ex){
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                    }
                                }).start();
                                
                                
                                break;
                            case 3: // modified udp
                                jTextArea1.append("Sending"+ path + " via Modified UDP transfer.\n");
                                
                                new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        String host = "127.0.0.1";
                                        int port = 10341;
                                        System.out.println("Ready to send the file!");
                                        String fileName = path;
                                        long initialTime = System.currentTimeMillis();
                                        try{
                                            
                                            RUDPClient.createAndSend(host, port, fileName);
                                            jTextArea1.append("Sent.\n");
                                            long totalTime = System.currentTimeMillis()- initialTime;
                                            jTextArea1.append("Total time spent: "+totalTime+ " ms. \n");
                                        }catch(Exception ex){
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                    }
                                }).start();
                                break;
                            case 4: // modified app + original udp
                                jTextArea1.append("Sending"+ path + " via Modified App (original UDP) transfer.\n");
                                
                                new Thread(new Runnable() {
                                    public void run() {
                                        //Do whatever
                                        
                                        String hostName = "127.0.0.1";
                                        final int port = 10344;
                                        final String fileName = path;
                                        long initialTime = System.currentTimeMillis();
                                        try{
                                            ModifiedAppClient.createAndSend(hostName, port, fileName);
                                            jTextArea1.append("Sent.\n");
                                            long totalTime = System.currentTimeMillis()- initialTime;
                                            jTextArea1.append("Total time spent: "+totalTime+ " ms. \n");
                                        }catch(Exception ex){
                                            jTextArea1.append(ex.toString()+"\n");
                                        }
                                    }
                                }).start();
                                
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
            
        });
        
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        /*
        JRadioButton jRadioButton1 = new JRadioButton("button 1", true);
        JRadioButton jRadioButton2 = new JRadioButton("button 2");
        ButtonGroup buttonGroup1 = new ButtonGroup();
        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
        setLayout(new FlowLayout());
        add(jRadioButton1);
        add(jRadioButton2);
        
        jRadioButton1.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                System.out.println("button 1 clicked");
            }
            
        });
        
        pack();
                */
        System.out.println("123");
        
    }
}
